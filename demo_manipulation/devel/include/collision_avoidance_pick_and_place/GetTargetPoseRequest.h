/* Software License Agreement (BSD License)
 *
 * Copyright (c) 2011, Willow Garage, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  * Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  * Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials provided
 *    with the distribution.
 *  * Neither the name of Willow Garage, Inc. nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 * FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 * COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 * ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * Auto-generated by genmsg_cpp from file /home/conghui/industrial_training/training/ref/demo_manipulation/src/collision_avoidance_pick_and_place/srv/GetTargetPose.srv
 *
 */


#ifndef COLLISION_AVOIDANCE_PICK_AND_PLACE_MESSAGE_GETTARGETPOSEREQUEST_H
#define COLLISION_AVOIDANCE_PICK_AND_PLACE_MESSAGE_GETTARGETPOSEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <shape_msgs/SolidPrimitive.h>
#include <geometry_msgs/Pose.h>

namespace collision_avoidance_pick_and_place
{
template <class ContainerAllocator>
struct GetTargetPoseRequest_
{
  typedef GetTargetPoseRequest_<ContainerAllocator> Type;

  GetTargetPoseRequest_()
    : world_frame_id()
    , ar_tag_frame_id()
    , shape()
    , remove_at_poses()  {
    }
  GetTargetPoseRequest_(const ContainerAllocator& _alloc)
    : world_frame_id(_alloc)
    , ar_tag_frame_id(_alloc)
    , shape(_alloc)
    , remove_at_poses(_alloc)  {
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _world_frame_id_type;
  _world_frame_id_type world_frame_id;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ar_tag_frame_id_type;
  _ar_tag_frame_id_type ar_tag_frame_id;

   typedef  ::shape_msgs::SolidPrimitive_<ContainerAllocator>  _shape_type;
  _shape_type shape;

   typedef std::vector< ::geometry_msgs::Pose_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Pose_<ContainerAllocator> >::other >  _remove_at_poses_type;
  _remove_at_poses_type remove_at_poses;




  typedef boost::shared_ptr< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;

}; // struct GetTargetPoseRequest_

typedef ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<std::allocator<void> > GetTargetPoseRequest;

typedef boost::shared_ptr< ::collision_avoidance_pick_and_place::GetTargetPoseRequest > GetTargetPoseRequestPtr;
typedef boost::shared_ptr< ::collision_avoidance_pick_and_place::GetTargetPoseRequest const> GetTargetPoseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace collision_avoidance_pick_and_place

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/hydro/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/hydro/share/geometry_msgs/cmake/../msg'], 'shape_msgs': ['/opt/ros/hydro/share/shape_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/hydro/share/std_msgs/cmake/../msg'], 'pcl_msgs': ['/opt/ros/hydro/share/pcl_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5099dc677062eec167a647083579134e";
  }

  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5099dc677062eec1ULL;
  static const uint64_t static_value2 = 0x67a647083579134eULL;
};

template<class ContainerAllocator>
struct DataType< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "collision_avoidance_pick_and_place/GetTargetPoseRequest";
  }

  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string world_frame_id\n\
string ar_tag_frame_id\n\
shape_msgs/SolidPrimitive shape\n\
geometry_msgs/Pose[] remove_at_poses\n\
\n\
================================================================================\n\
MSG: shape_msgs/SolidPrimitive\n\
# Define box, sphere, cylinder, cone \n\
# All shapes are defined to have their bounding boxes centered around 0,0,0.\n\
\n\
uint8 BOX=1\n\
uint8 SPHERE=2\n\
uint8 CYLINDER=3\n\
uint8 CONE=4\n\
\n\
# The type of the shape\n\
uint8 type\n\
\n\
\n\
# The dimensions of the shape\n\
float64[] dimensions\n\
\n\
# The meaning of the shape dimensions: each constant defines the index in the 'dimensions' array\n\
\n\
# For the BOX type, the X, Y, and Z dimensions are the length of the corresponding\n\
# sides of the box.\n\
uint8 BOX_X=0\n\
uint8 BOX_Y=1\n\
uint8 BOX_Z=2\n\
\n\
\n\
# For the SPHERE type, only one component is used, and it gives the radius of\n\
# the sphere.\n\
uint8 SPHERE_RADIUS=0\n\
\n\
\n\
# For the CYLINDER and CONE types, the center line is oriented along\n\
# the Z axis.  Therefore the CYLINDER_HEIGHT (CONE_HEIGHT) component\n\
# of dimensions gives the height of the cylinder (cone).  The\n\
# CYLINDER_RADIUS (CONE_RADIUS) component of dimensions gives the\n\
# radius of the base of the cylinder (cone).  Cone and cylinder\n\
# primitives are defined to be circular. The tip of the cone is\n\
# pointing up, along +Z axis.\n\
\n\
uint8 CYLINDER_HEIGHT=0\n\
uint8 CYLINDER_RADIUS=1\n\
\n\
uint8 CONE_HEIGHT=0\n\
uint8 CONE_RADIUS=1\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.world_frame_id);
      stream.next(m.ar_tag_frame_id);
      stream.next(m.shape);
      stream.next(m.remove_at_poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GetTargetPoseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::collision_avoidance_pick_and_place::GetTargetPoseRequest_<ContainerAllocator>& v)
  {
    s << indent << "world_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.world_frame_id);
    s << indent << "ar_tag_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ar_tag_frame_id);
    s << indent << "shape: ";
    s << std::endl;
    Printer< ::shape_msgs::SolidPrimitive_<ContainerAllocator> >::stream(s, indent + "  ", v.shape);
    s << indent << "remove_at_poses[]" << std::endl;
    for (size_t i = 0; i < v.remove_at_poses.size(); ++i)
    {
      s << indent << "  remove_at_poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "    ", v.remove_at_poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // COLLISION_AVOIDANCE_PICK_AND_PLACE_MESSAGE_GETTARGETPOSEREQUEST_H
